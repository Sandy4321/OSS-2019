#########################################################
#     Installing and loading required packages          #
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
require("ggplot2")
}
if (!require("dplyr")) {
install.packages("dplyr", dependencies = TRUE)
library("dplyr")
}
setwd("/mnt/SSD-DATA/FAPESP-2018")
projects <- read.csv("spreadsheets/summary.csv", header=TRUE,
colClasses=c("name" = "character",
"owner" = "character",
"created_at" = "character",
"github_url" = "character",
"pulls_merged_total" = "numeric",
"pulls_merged_code_churn" = "numeric",
"commits_total" = "numeric",
"stars_total" = "numeric",
"forks_total" = "numeric",
"has_contributing" = "logical",
"has_readme" = "logical",
"used_languages_total" = "numeric",
"open_issues_total" = "numeric",
"age" = "numeric",
"application_domain" = "character",
"main_language" = "character",
"owner_type" = "character",
"software_license" = "character",
"newcomers_total" = "numeric",
"contributors_total" = "numeric",
"core_members_total" = "numeric",
"time_for_first_review_median" = "numeric",
"time_for_merge_median" = "numeric"
))
boxplot_distribution <- function(n_row, n_column, columns, labels) {
par(mfrow=c(n_row, n_column)) # Create a matrix of plots
for (column in seq_len(ncol(columns))) {
par(mar=c(2, 5, 2, 1) + 0.1)
boxplot(columns[[column]], ylab=labels[[column]], outline=FALSE, cex.lab = 1.6, cex.axis = 1.8)
}
}
##############################################
#    FIGURE: Summary (Forks, Stars, Age) #
##############################################
distribution <- subset(projects, select=c("forks_total","stars_total","open_issues_total"))
labels <- list("# Forks", "# Stars", "# Open Issues")
boxplot_distribution(1, 3, distribution, labels)
boxplot_distribution <- function(n_row, n_column, columns, labels) {
# Create a matrix of plots
par(mfrow=c(n_row, n_column))
for (index in seq_len(ncol(columns))) {
boxplot(columns[[index]], ylab=labels[[index]], outline=FALSE, cex.lab = 1.6, cex.axis = 1.8)
}
}
##############################################
#    FIGURE: Summary (Forks, Stars, Age) #
##############################################
distribution <- subset(projects, select=c("forks_total","stars_total","open_issues_total"))
labels <- list("# Forks", "# Stars", "# Open Issues")
boxplot_distribution(1, 3, distribution, labels)
boxplot_distribution <- function(n_row, n_column, columns, labels) {
# Create a matrix of plots
par(mfrow=c(n_row, n_column))
for (index in seq_len(ncol(columns))) {
boxplot(columns[[index]], ylab=labels[[index]], outline=FALSE, cex.lab = 1.6, cex.axis = 1.8)
}
}
##############################################
#    FIGURE: Summary (Forks, Stars, Age) #
##############################################
distribution <- subset(projects, select=c("forks_total","stars_total","open_issues_total"))
labels <- list("# Forks", "# Stars", "# Open Issues")
boxplot_distribution(1, 3, distribution, labels)
#########################################################
#     Installing and loading required packages          #
#########################################################
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("ggplot2")) {
install.packages("ggplot2", dependencies = TRUE)
require("ggplot2")
}
if (!require("dplyr")) {
install.packages("dplyr", dependencies = TRUE)
library("dplyr")
}
setwd("/mnt/SSD-DATA/FAPESP-2018")
projects <- read.csv("spreadsheets/summary.csv", header=TRUE,
colClasses=c("name" = "character",
"owner" = "character",
"created_at" = "character",
"github_url" = "character",
"pulls_merged_total" = "numeric",
"pulls_merged_code_churn" = "numeric",
"commits_total" = "numeric",
"stars_total" = "numeric",
"forks_total" = "numeric",
"has_contributing" = "logical",
"has_readme" = "logical",
"used_languages_total" = "numeric",
"open_issues_total" = "numeric",
"age" = "numeric",
"application_domain" = "character",
"main_language" = "character",
"owner_type" = "character",
"software_license" = "character",
"newcomers_total" = "numeric",
"contributors_total" = "numeric",
"core_members_total" = "numeric",
"time_for_first_review_median" = "numeric",
"time_for_merge_median" = "numeric"
))
DistributionBoxplot <- function(n_row, n_column, columns, labels) {
par(mfrow=c(n_row, n_column))
for (index in seq_len(ncol(columns))) {
par(mar=c(2, 5, 2, 1) + 0.1)
boxplot(columns[[index]], ylab=labels[[index]], outline=FALSE, cex.lab = 1.6, cex.axis = 1.8)
}
}
ProportionBarplot <- function(distribution) {
par(mar=c(2, 2, 2, 2) + 0.1, las=2)
table <- table(distribution)
barplot(sort(table))
}
CorrelationScatterplot <- function(column.x, column.y, label.x, label.y) {
column.x.log10 <- log10(column.x)
column.y.log10 <- log10(column.y)
plot(column.x.log10, column.y.log10, xlab=label.x, ylab=label.y)
#regression = lm(log10_column_y ~ log10_column_x)
#abline(regression, untf=T, col="red")
}
##############################################
#    FIGURE: Summary (Forks, Stars, Age) #
##############################################
distribution <- subset(projects, select=c("forks_total","stars_total","open_issues_total"))
labels <- list("# Forks", "# Stars", "# Open Issues")
DistributionBoxplot(1, 3, distribution, labels)
##########################################################
#    FIGURE: Summary (Merged pull-requests, Commits) #
##########################################################
distribution <- subset(projects, select=c("pulls_merged_total","commits_total"))
labels <- list("# Pull-requests", "# Commits")
DistributionBoxplot(1, 2, distribution, labels)
##############################################
#    FIGURE: Proportion (Projects by domain) #
##############################################
distribution <- subset(projects, select=c("application_domain"))
ProportionBarplot(distribution)
# Correlation: Total of Newcomers x Stars
column.x <- projects[["newcomers_total"]]
column.y <- projects[["stars_total"]]
CorrelationScatterplot(column.x, column.y, "# Newcomers", "# Stars")
# Correlation: Total of Newcomers x Pull-requests
column.x <- projects[["newcomers_total"]]
column.y <- projects[["pulls_merged_total"]]
CorrelationScatterplot(column.x, column.y, "# Newcomers", "# Pull-requests (Merged)")
# Correlation: Total of Newcomers x Forks
column.x <- projects[["newcomers_total"]]
column.y <- projects[["forks_total"]]
CorrelationScatterplot(column.x, column.y, "# Newcomers", "# Forks")
# Correlation: Total of Newcomers x Commits
column.x <- projects[["newcomers_total"]]
column.y <- projects[["commits_total"]]
CorrelationScatterplot(column.x, column.y, "# Newcomers", "# Commits")
# Correlation: Total of Newcomers x Number of used languages
column.x <- projects[["newcomers_total"]]
column.y <- projects[["used_languages_total"]]
CorrelationScatterplot(column.x, column.y, "# Newcomers", "# Prog. Languages")
# Correlation: Total of Newcomers x Open issues
column.x <- projects[["newcomers_total"]]
column.y <- projects[["open_issues_total"]]
CorrelationScatterplot(column.x, column.y, "# Newcomers", "# Open issues")
#########################################################################
#  TABLE: (SPEARMAN CORRELATION) Total Newcomers x Analytical Measures  #
#########################################################################
help(cor)
help("wilcox.test")
help("cor.test")
#############################################################
#  TABLE: (SPEARMAN) Total Newcomers x Analytical Measures  #
#############################################################
# Total Newcomers x Stars
cor.test(x=newcomers_total, y=stars_total, data=projects, method='spearman')
if (!require("effsize")) {
install.packages("effsize", dependencies = TRUE)
require("effsize")
}
if (!require("oddsratio")) {
install.packages("oddsratio", dependencies = TRUE)
library("oddsratio")
}
setwd("/mnt/SSD-DATA/FAPESP-2018")
projects <- read.csv("spreadsheets/summary.csv", header=TRUE,
colClasses=c("name" = "character",
"owner" = "character",
"created_at" = "character",
"github_url" = "character",
"pulls_merged_total" = "numeric",
"commits_total" = "numeric",
"stars_total" = "numeric",
"forks_total" = "numeric",
"has_contributing" = "logical",
"has_readme" = "logical",
"used_languages_total" = "numeric",
"open_issues_total" = "numeric",
"age" = "numeric",
"application_domain" = "character",
"main_language" = "character",
"owner_type" = "character",
"software_license" = "character",
"newcomers_total" = "numeric",
"contributors_total" = "numeric",
"core_members_total" = "numeric",
"pulls_merged_code_churn" = "numeric",
"time_for_first_review_median" = "numeric",
"time_for_merge_median" = "numeric"))
#############################################################
#  TABLE: (SPEARMAN) Total Newcomers x Analytical Measures  #
#############################################################
# Total Newcomers x Stars
cor.test(x=newcomers_total, y=stars_total, data=projects, method='spearman')
# Total Newcomers x Pull-requests
cor.test(x=newcomers_total, y=pulls_merged_total, data=projects, method='spearman')
View(projects)
#############################################################
#  TABLE: (SPEARMAN) Total Newcomers x Analytical Measures  #
#############################################################
# Total Newcomers x Stars
cor.test(newcomers_total ~ stars_total, data=projects, method='spearman')
,
#############################################################
#  TABLE: (SPEARMAN) Total Newcomers x Analytical Measures  #
#############################################################
# Total Newcomers x Stars
cor.test(x=newcomers_total, y=stars_total, data=projects, method='spearman')
#############################################################
#  TABLE: (SPEARMAN) Total Newcomers x Analytical Measures  #
#############################################################
# Total Newcomers x Stars
cor.test(x=projects$newcomers_total, y=stars_total, data=projects, method='spearman')
projects$
projects$
projects$
#############################################################
#  TABLE: (SPEARMAN) Total Newcomers x Analytical Measures  #
#############################################################
# Total Newcomers x Stars
cor.test(x=projects$newcomers_total, y=projects$stars_total, method='spearman')
# Total Newcomers x Pull-requests
cor.test(x=projects$newcomers_total, y=projects$pulls_merged_total, method='spearman')
# Total Newcomers x Forks
cor.test(x=projects$newcomers_total, y=projects$forks_total, method='spearman')
# Total Newcomers x Commits
cor.test(x=projects$newcomers_total, y=projects$commits_total, method='spearman')
# Total Newcomers x Open issues
cor.test(x=projects$newcomers_total, y=projects$open_issues_total, method='spearman')
# Total Newcomers x Used languages
cor.test(x=projects$newcomers_total, y=projects$used_languages_total, method='spearman')
########################################################################################
#  TABLE: (Wilcox & Cliffs) Total Newcomers (Divided by median) x Analytical Measures  #
########################################################################################
newcomers.median <- median(projects$newcomer_total)
projects.under.median <- projects[which(projects$newcomer_total < newcomers.median),]
########################################################################################
#  TABLE: (Wilcox & Cliffs) Total Newcomers (Divided by median) x Analytical Measures  #
########################################################################################
newcomers.median <- median(projects$newcomers_total)
projects.under.median <- projects[which(projects$newcomers_total < newcomers.median),]
projects.above.median <- projects[which(projects$newcomers_total >= newcomers.median),]
wilcox.test(projects.above.median$commit_total, projects.under.median$commit_total)
cliff.delta(projects.above.median$commit_total, projects.under.median$commit_total)
wilcox.test(projects.above.median$number_of_open_issues, projects.under.median$number_of_open_issues)
cliff.delta(projects.above.median$number_of_open_issues, projects.under.median$number_of_open_issues)
wilcox.test(projects.above.median$open_issues_total, projects.under.median$open_issues_total)
cliff.delta(projects.above.median$open_issues_total, projects.under.median$open_issues_total)
wilcox.test(projects.above.median$pulls_merged_total, projects.under.median$pull_merged_total)
cliff.delta(projects.above.median$pulls_merged_total, projects.under.median$pull_merged_total)
wilcox.test(projects.above.median$pulls_merged_total, projects.under.median$pulls_merged_total)
cliff.delta(projects.above.median$pulls_merged_total, projects.under.median$pulls_merged_total)
View(projects)
if (!require("gamlss")) {
install.packages("gamlss", dependencies = TRUE)
library(gamlss)
}
if (!require("tidyverse")) {
install.packages("tidyverse", dependencies = TRUE)
library(tidyverse)
}
if (!require("magrittr")) {
install.packages("magrittr", dependencies = TRUE)
require("magrittr")
}
if (!require("rms")) {
install.packages("rms", dependencies = TRUE)
library("rms")
}
setwd("/mnt/SSD-DATA/FAPESP-2018")
projects <- read.csv("spreadsheets/summary.csv", header=TRUE,
colClasses=c("name" = "character",
"owner" = "character",
"created_at" = "character",
"github_url" = "character",
"pulls_merged_total" = "numeric",
"pulls_merged_code_churn" = "numeric",
"commits_total" = "numeric",
"stars_total" = "numeric",
"forks_total" = "numeric",
"has_contributing" = "logical",
"has_readme" = "logical",
"used_languages_total" = "numeric",
"open_issues_total" = "numeric",
"age" = "numeric",
"application_domain" = "character",
"main_language" = "character",
"owner_type" = "character",
"software_license" = "character",
"newcomers_total" = "numeric",
"contributors_total" = "numeric",
"core_members_total" = "numeric",
"time_for_first_review_median" = "numeric",
"time_for_merge_median" = "numeric"
))
projects %<>%
filter(newcomers_total != 0)
projects %<>%
mutate(agecat = case_when(
age < 4 ~ "young",
age > 3 & age < 8 ~ "adult",
age > 7 ~ "old"))
projects %<>%
mutate(licensecat = case_when(
software_license == "MIT License" | software_license == "BSD 2-Clause \"Simplified\" License" | software_license == "Creative Commons Attribution 4.0" | software_license == "Creative Commons Attribution 4.0 International" | software_license == "BSD 3-Clause \"New\" or \"Revised\" License" | software_license == "Apache License 2.0" | software_license == "Do What The F*ck You Want To Public License" | software_license == "ISC License" | software_license == "Artistic License 2.0" ~ "Permissive",
software_license == "GNU General Public License v3.0" | software_license == "GNU General Public License v2.0" | software_license == "GNU Affero General Public License v3.0" ~ "TotalReciprocal",
software_license == "Mozilla Public License 2.0" | software_license == "Eclipse Public License 1.0" | software_license == "GNU Lesser General Public License v2.1" | software_license == "GNU Lesser General Public License v2.1" | software_license == "The Unlicense" ~ "PartialReciprocal",
software_license == "Other" | software_license == "NOASSERTION" ~ "Others"))
explanatory.variables <- c("agecat", "main_language", "forks_total", "pulls_merged_total", "owner_type", "core_members_total")
hierarchal.tree <- varclus(~ ., data=projects[,explanatory.variables], trans="abs")
# To detect high correlated variables, we use Spearman coefficient. Variables with high correlation (p > 0.7) can be removed.
spearman.threshold <- 0.7
plot(hierarchal.tree)
abline(h=1 - spearman.threshold, col="red", lty=2)
redundant.variables <- redun(~., data=projects[,explanatory.variables], nk=0)
# To detect redundant variables, we use the redun function. Redundant variables (R^2  > 0.9) can be removed.
print(redundant.variables)
#########################################################
#                   Regression Model                    #
#########################################################
projects$time_for_first_review_median <- NULL
projects$time_for_merge_median <- NULL
projects %>%
ggplot(aes(x = newcomers_total)) +
geom_histogram()
fit_project <- gamlss(newcomers_total ~ agecat + application_domain + licensecat + main_language + owner_type, data = projects, family = GA())
plot(fit_project)
summary(fit_project)
